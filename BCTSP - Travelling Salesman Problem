// cach 1
#include<bits/stdc++.h>
using namespace std;
#define bit(mask, i) ((mask >> i) & 1)
int n, c[15][15], f[1 << 15][15];

int main() {
	ios_base::sync_with_stdio(); cin.tie(0); cout.tie(0);
	cin >> n;
	for(int i = 0; i < n; ++i) {
		for(int j = 0; j < n; ++j) {
			cin >> c[i][j];
		}
	}
	for(int i = 0; i < n; ++i) {
		f[1 << i][i] = c[0][i];
	}
	for(int mask = 1; mask < 1 << n; ++mask) {
		if(__builtin_popcount(mask) == 1) continue;
		for(int i = 0; i < n; ++i) {
			f[mask][i] = 1e9;
			if(bit(mask, i)) {
				for(int j = 0; j < n; ++j) {
					if(bit(mask, j) && j != i) f[mask][i] = min(f[mask][i], f[mask ^ (1 << i)][j] + c[j][i]);
				}
			}
		}
	}
	cout << f[(1 << n) - 1][0];
}

// cach 2
#include<bits/stdc++.h>
using namespace std;
#define bit(mask, i) ((mask >> i) & 1)
int n, c[15][15], f[1 << 15][15];
 
int main() {
	ios_base::sync_with_stdio(); cin.tie(0); cout.tie(0);
	cin >> n;
	for(int i = 0; i < n; ++i) {
		for(int j = 0; j < n; ++j) {
			cin >> c[i][j];
		}
	}
	for(int i = 0; i < n; ++i) {
		f[1 << i][i] = c[0][i];
	}
	for(int mask = 1; mask < 1 << n; ++mask) {
		if(__builtin_popcount(mask) == 1) continue;
		for(int i = 0; i < n; ++i) {
			f[mask][i] = 1e9;
			if(bit(mask, i)) {
				int pre_mask = mask - (1 << i);
				for(int j = 0; j < n; ++j) {
					if(bit(pre_mask, j)) f[mask][i] = min(f[mask][i], f[pre_mask][j] + c[j][i]);
				}
			}
		}
	}
	cout << f[(1 << n) - 1][0];
} 
