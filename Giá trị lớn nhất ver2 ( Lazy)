#include<bits/stdc++.h>
using namespace std;

int n, m;

struct Node {
	int val, lazy;
} nodes[200005];

void down(int id) {
	int t = nodes[id].lazy; nodes[id].lazy = 0;

	nodes[2 * id].lazy += t; nodes[2 * id].val += t;
	nodes[2 * id + 1].lazy += t; nodes[2 * id + 1].val += t;
}

void update(int id, int l, int r, int tl, int tr, int k) {
	if(r < tl || l > tr) return;

	if(l <= tl && r >= tr) {
		nodes[id].val += k;
		nodes[id].lazy += k;
		return;
	}

	down(id);
	int tm = (tl + tr) / 2;
	update(2 * id, l, r, tl, tm, k); update(2 * id + 1, l, r, tm + 1, tr, k);
	nodes[id].val = max(nodes[2 * id].val, nodes[2 * id + 1].val); 
}

int findMax(int id, int l, int r, int tl, int tr) {
	if(r < tl || l > tr) return INT_MIN;

	if(l <= tl && r >= tr) {
		return nodes[id].val;
	}

	down(id);
	int tm = (tl + tr) / 2;
	return max(findMax(2 * id, l, r, tl, tm), findMax(2 * id + 1, l, r, tm + 1, tr));
}

int main() {
    cin >> n >> m;
    while(m--) {
        int q; cin >> q;
        if(!q) {
            int l, r, k; cin >> l >> r >> k;
            update(1, l, r, 1, n, k);
        }
        else {
            int l, r; cin >> l >> r;
            cout << findMax(1, l, r, 1, n) << endl;
        }
    }
}
