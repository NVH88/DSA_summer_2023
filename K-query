#include<bits/stdc++.h>
using namespace std;

int n, a[30005];
vector<int> t[120005];

vector<int> merge(vector<int> a, vector<int> b) {
	int i = 0, j = 0;
	vector<int> v;
	while(i < a.size() && j < b.size()) {
		if(a[i] < b[j]) v.push_back(a[i]), ++i;
		else v.push_back(b[j]), ++j;
	}
	while(i < a.size()) v.push_back(a[i]), ++i;
	while(j < b.size()) v.push_back(b[j]), ++j;
	return v;
}

void build(int id, int l, int r) {
	if(l > r) return;

	if(l == r) {
		t[id].push_back(a[l]);
		return;
	}

	int m = (l + r) / 2;
	build(2 * id, l, m); build(2 * id + 1, m + 1, r);
	t[id] = merge(t[2 * id], t[2 * id + 1]);
}

int count(int id, int tl, int tr, int l, int r, int k) {
	if(l > tr || r < tl) return 0;

	if(tl >= l && tr <= r) {
		return t[id].end() - upper_bound(t[id].begin(), t[id].end(), k);
	}

	int tm = (tl + tr) / 2;
	return count(2 * id, tl, tm, l, r, k) + count(2 * id + 1, tm + 1, tr, l, r, k);
}

int main() {
	cin >> n;
	for(int i = 1; i <= n; ++i) cin >> a[i];
	build(1, 1, n);
	int q; cin >> q;
	while(q--) {
		int l, r, k; cin >> l >> r >> k;
		cout << count(1, 1, n, l, r, k) << endl;
	}
}
