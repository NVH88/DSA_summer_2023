#include<bits/stdc++.h>
using namespace std;
#define bit(mask, i) ((mask >> i) & 1)
long long n, a[8][10004], d[1 << 8], sum[1 << 8][10004], f[1 << 8][10004], ans = -1e9;

int main() {
	ios_base::sync_with_stdio(); cin.tie(0); cout.tie(0);
	cin >> n;
	for(int i = 0; i < 8; ++i) {
		for(int j = 0; j < n; ++j) {
			cin >> a[i][j];
			ans = max(ans, a[i][j]);
		}
	}
	if(ans < 0) {
		cout << ans;
		return 0;
	}
	for(int i = 0; i < 1 << 8; ++i) {
		d[i] = 1;
		for(int j = 0; j < 7; ++j) {
			if(bit(i, j) && bit(i, j + 1)) d[i] = 0;
		}
	}
	for(int mask = 0; mask < 1 << 8; ++mask) {
		if(d[mask]) {
			for(int i = 0; i < n; ++i) {
				for(int j = 0; j < 8; ++j) {
					if(bit(mask, j)) sum[mask][i] += a[j][i];
				}
				ans = max(ans, sum[mask][i]);
				f[mask][i] = sum[mask][i];
			}
		}
	}
	for(int i = 1; i < n; ++i) {
		for(int mask = 0; mask < 1 << 8; ++mask) {
			if(d[mask]) {
				for(int pre_mask = 0; pre_mask < 1 << 8; ++pre_mask) {
					if(d[pre_mask] && !(mask & pre_mask)) {
						f[mask][i] = max(f[mask][i], f[pre_mask][i - 1] + sum[mask][i]);
						ans = max(ans, f[mask][i]);
					}
				}	
			}
		}
	}
	cout << ans;
}
