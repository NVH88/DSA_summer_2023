#include<bits/stdc++.h>
using namespace std;
const int N = 200001;
#define ll long long

vector<int> ke[N];
ll n, q, x[N], in[N], out[N], bit[2 * N], timer;
//in[i]: lần đầu đi vào i
//out[i]: khi đã đi hết các con của i
//bit[i]: cây fenwick
//=> cần tính tổng cây con của i chỉ cần lấy truy vấn của out[i] - truy vấn của in[i]

void init() {
    cin >> n >> q;
    for (int i = 1; i <= n; ++i) {
        cin >> x[i];
    }
    for (int i = 1; i < n; ++i) {
        int u, v; cin >> u >> v;
        ke[u].push_back(v);
        ke[v].push_back(u);
    }
}

void DFS(int u, int p) {
    in[u] = ++timer;
    for (int v : ke[u]) if(v != p) {
        DFS(v, u);
    }
    out[u] = ++timer;
}

void update(int idx, int val) {
    for (int i = idx; i <= 2 * n; i += i & -i) 
        bit[i] += val;
}

ll get(int idx) {
    ll ans = 0;
    for (int i = idx; i > 0; i -= i & -i)
        ans += bit[i];
    return ans;
}

int main() {
    ios_base::sync_with_stdio(false); cin.tie(NULL);
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif
   
    init();
    DFS(1, -1);
    for (int i = 1; i <= n; ++i)
        update(out[i], x[i]);
    while (q--) {
        int c; cin >> c;
        if (c == 1) {
            int u, val; cin >> u >> val;
            update(out[u], val - x[u]);
            x[u] = val;
        }
        else {
            int u; cin >> u;
            cout << get(out[u]) - get(in[u]) << endl;
        }
    }
}
